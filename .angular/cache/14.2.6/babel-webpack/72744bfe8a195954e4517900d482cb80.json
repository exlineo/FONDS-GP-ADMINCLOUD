{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { NotificationService } from 'src/app/intranet/systeme/services/notification.service';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../../extranet/systeme/services/auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/intranet/systeme/services/notification.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../../extranet/systeme/services/auth.service\";\nexport let CollectionService = /*#__PURE__*/(() => {\n  class CollectionService {\n    constructor(http, notifServ, router, auth) {\n      this.http = http;\n      this.notifServ = notifServ;\n      this.router = router;\n      this.auth = auth;\n      this.getCollections();\n    }\n    /**\r\n     * Récupérer l'ensemble des collections disponibles dans le depôt\r\n     */\n\n\n    getCollections() {\n      this.http.get(environment.SERV + 'collections').subscribe(data => {\n        this.collections = data;\n        this.notifServ.notif('Collections récupérées');\n      });\n    }\n    /**\r\n     * Renvoyer une collection du tableau en fonction de son _id\r\n     * @param id _id de la notice à récupérer\r\n     * @return CollectionI (une collection)\r\n     */\n\n\n    getCollection(id) {\n      for (let c of this.collections) {\n        if (c._id == id) {\n          this.collection = c;\n          this.notifServ.notif('Collection récupérée'); // return c;\n        }\n      }\n    }\n    /**\r\n     * Mise à jour d'une collection\r\n     */\n\n\n    majCollection() {\n      this.http.put(environment.SERV + 'collections/', this.collection).subscribe(retour => {\n        this.notifServ.notif(\"La collection a été mise à jour\");\n      }, erreur => {\n        this.notifServ.notif(\"Une erreur s'est produite dans l'enregistrement\");\n      });\n    }\n    /**\r\n     * Ajouter une collection\r\n     */\n\n\n    ajouteCollection() {\n      this.http.post(environment.SERV + 'collections', this.collection).subscribe(retour => {\n        this.collections.push(this.collection);\n        this.router.navigateByUrl('/intranet/collections');\n        this.notifServ.notif(\"La collection a bien été ajoutée\");\n      }, erreur => {\n        this.notifServ.notif(\"Une erreur s'est produite dans l'enregistrement\");\n      });\n    }\n    /**\r\n     * Supprimer la collection\r\n     * @param id ID de la collection à supprimer\r\n     */\n\n\n    supprCollec(id) {\n      this.http.delete(environment.SERV + 'collections/' + id).subscribe(retour => {\n        this.notifServ.notif(\"Collection supprimée\");\n        this.collections.splice(this.collections.findIndex(c => c._id == id), 1);\n      }, erreur => {\n        console.log(erreur);\n        this.notifServ.notif(\"Une erreur s'est produite dans la destrucion de la collection\");\n      });\n    }\n    /**\r\n     * Les séries d'une collection\r\n     * @param id ID de la collection dont nous recherchons les séries\r\n     */\n\n\n    getSeries(id) {\n      this.http.get(environment.SERV + 'collections/' + id + '/series').subscribe(retour => {\n        this.notifServ.notif(\"Les séries ont été extraites\");\n      }, erreur => {\n        this.notifServ.notif(\"Une erreur s'est produite dans l'enregistrement\");\n      });\n    }\n    /**\r\n     * Paquet de notices à créer puis insertion d'une collection\r\n     * @param ar Tableau de notices à envoyer au serveur pour les créer par paquetes\r\n     */\n\n\n    ajouteNoticeAvantCollection() {\n      this.http.post(environment.SERV + 'notices/true', this.notices).subscribe(retour => {\n        // Attribution des ids des notices à la collection (retour de la base)\n        this.collection.notices = Object.values(retour['insertedIds']);\n        this.ajouteCollection(); // Ajouter la collection une fois que les notices sont ajoutées\n\n        this.notifServ.notif(\"Les notices ont été insérées dans la base de données.\");\n      }, erreur => {\n        console.log(erreur);\n        this.notifServ.notif(\"Une erreur dans l'enregistrement des notices\");\n      });\n    }\n\n  }\n\n  CollectionService.ɵfac = function CollectionService_Factory(t) {\n    return new (t || CollectionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotificationService), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.AuthService));\n  };\n\n  CollectionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CollectionService,\n    factory: CollectionService.ɵfac,\n    providedIn: 'root'\n  });\n  return CollectionService;\n})();","map":null,"metadata":{},"sourceType":"module"}