{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { environment } from '../../../../environments/environment';\nimport { Set } from '../modeles/set';\nimport { NotificationService } from 'src/app/intranet/systeme/services/notification.service';\nimport { UtilsService } from '../library/utils.service';\nimport { FiltresService } from './filtres.service';\nimport { SetsService } from './sets.service';\nimport { AuthService } from '../../../extranet/systeme/services/auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/intranet/systeme/services/notification.service\";\nimport * as i3 from \"../library/utils.service\";\nimport * as i4 from \"./filtres.service\";\nimport * as i5 from \"./sets.service\";\nimport * as i6 from \"../../../extranet/systeme/services/auth.service\";\nexport let ScanService = /*#__PURE__*/(() => {\n  class ScanService {\n    constructor(http, notifServ, utils, filtreServ, setServ, auth) {\n      this.http = http;\n      this.notifServ = notifServ;\n      this.utils = utils;\n      this.filtreServ = filtreServ;\n      this.setServ = setServ;\n      this.auth = auth;\n      this.dir = ''; // Dossier scanné en cours\n\n      this.load = false; // Déclencher un loader sur la page de scan\n\n      this.init();\n      this.getListeDossiers();\n    }\n    /**\r\n     * Initialiser les données initiales\r\n     */\n\n\n    init() {\n      this.filtre = [];\n      this.set = new Set();\n      this.metas = null;\n      this.dir = '';\n    }\n    /**\r\n     * Liste les dossiers scannables\r\n     */\n\n\n    getListeDossiers() {\n      this.http.get(environment.SERV + 'scans').subscribe(data => {\n        this.listeDossiers = data;\n        this.notifServ.notif(\"Liste des dossiers récupérée\");\n      }, erreur => {\n        this.notifServ.notif(\"Nous n'avons pas la liste des dossiers\");\n      });\n    }\n    /**\r\n       * Récupérer les métadonnées d'un fichier donné\r\n       */\n\n\n    getMetaFiles(dir, f) {\n      // return this.http.get<Array<CollectionModel>>(this.dataStorage + 'collections.json');\n      this.http.get(environment.SERV + 'scans/' + dir, {\n        params: {\n          'f': f\n        }\n      }).subscribe(fichier => {\n        this.scans = fichier['data'];\n        this.notifServ.notif(\"Metadonnées scannées\");\n      }, erreur => {\n        this.notifServ.notif(\"Les données n'ont pu être scannées\");\n      });\n    }\n    /**\r\n     * Récupérer la liste des métadonnées d'un dossier en particulier\r\n     */\n\n\n    getDir(dir) {\n      this.scans = null;\n      this.load = true;\n      this.dir = dir;\n      this.http.get(environment.SERV + 'scans/' + dir).subscribe(fichiers => {\n        this.scans = fichiers['data'];\n        this.load = false;\n        this.notifServ.notif(\"Metadonnées scannées\");\n      }, erreur => {\n        this.notifServ.notif(\"Erreur dans le scan des dossiers du serveur\");\n      });\n    }\n    /**\r\n     * Filtrer l'ensemble des données et les transmettre à la base\r\n     * @param filtre Filtre de référence pour traitr les données\r\n     */\n\n\n    setMetas(filtre, set) {\n      if (this.auth.userAuth.statut >= 2) {\n        this.metas = filtre.metadonnees; // Récupérer le filtre sélectionné\n        // Création d'un SET de base\n\n        this.set = set; // Paramétrer le nom du set de données\n\n        this.set.documents = []; // Initialisation des documents du SET\n\n        this.set.documents = this.scans.map(s => this.filtreAPlat(s)); // Enregistrer les données dans la base\n\n        this.enregistreSet();\n      }\n    }\n    /**\r\n     * Mettre à plat le filtre pour ne récupérer que les clés\r\n     * @param fm Filtre à traduire en objet pour l'inscrire dans le tableau des métas\r\n     * @param Le document à comparer\r\n     */\n\n\n    filtreAPlat(scan) {\n      let obj = {}; // Boucle dans les métadonnées du filtre\n\n      for (let un in this.metas) {\n        // Récupérer le premier niveau d'objet\n        if (typeof this.metas[un] == \"object\" && !Array.isArray(this.metas[un])) {\n          // Définir l'objet trouvé dans le temporaire\n          obj[un] = {};\n\n          for (let deux in this.metas[un]) {\n            if (typeof this.metas[un][deux] == \"object\" && !Array.isArray(this.metas[un][deux])) {\n              //Définir l'objet trouvé dans l'objet temporaire\n              obj[un][deux] = {};\n\n              for (let trois in this.metas[un][deux]) {\n                this.setPropriete(trois, obj[un][deux], scan);\n              }\n            } else {\n              this.setPropriete(deux, obj[un], scan);\n            }\n          }\n        } else {\n          this.setPropriete(un, obj, scan);\n        }\n      }\n\n      ; // Adapter certaines données\n      // L'identifier\n\n      if (!scan['identifier']) {\n        scan['identifiant_unique'] ? obj['dublincore'].identifier = \"oai:nemateria.net/\" + scan['identifiant_unique'] : obj['dublincore'].identifier = \"oai:nemateria.net/\" + Date.now();\n      }\n\n      ; // La date\n\n      if (!scan['date']) {\n        scan['date_creation_original'] ? obj['dublincore'].date = scan['date_creation_original'] : obj['dublincore'].date = Date.now();\n      } // Ajout du format du document pour en contrôler le type\n\n\n      obj['dublincore'].format = this.utils.setFormat(scan['SourceFile'].slice(scan['SourceFile'].lastIndexOf('.') + 1, scan['SourceFile'].length)); // Les prefix : oai au minimum. Les données Nemateria seront traitées par des outils plus riches\n\n      this.set.prefix ? obj['prefix'] = this.set.prefix : ['oai_dc'];\n      return obj;\n    }\n    /**\r\n     * Attribuer une propriété à un objet mappé\r\n     * @param prop Propriété à retouver dans les tableaux et objets\r\n     * @param obj Objet à inscrire la valeur\r\n     * @param scan Valeur à récupérer dans le scan\r\n     */\n\n\n    setPropriete(prop, obj, scan) {\n      let tmp = this.cap(prop);\n      console.log(tmp, scan[tmp]); // Gérer les cas particuliers\n\n      if (prop.toLowerCase() === 'url') scan[tmp] = this.setURL(scan['SourceFile']);\n      if (prop.toLowerCase() === 'coverage' && scan[tmp]) scan[tmp] = this.setURL(scan[tmp]);\n      if (prop === 'file') scan[tmp] = this.setFile(scan['SourceFile']); // Attribuer une nouvelle valeur\n      // if (scan.hasOwnProperty(tmp)) Object.defineProperty(obj, prop, { value: scan[tmp] });\n\n      if (scan.hasOwnProperty(tmp)) obj[prop] = scan[tmp];\n    }\n    /**\r\n     * Enregistrer les données dans la base mongo dans les sets de données\r\n     */\n\n\n    enregistreSet() {\n      this.http.post(environment.SERV + 'sets/', this.set).subscribe(retour => {\n        this.setServ.getSets(); // Mettre à jour les sets\n\n        this.notifServ.notif(\"SET enregistré\");\n      }, erreur => {\n        this.notifServ.notif(\"Erreur dans l'enregistrement du SET\");\n      });\n    }\n    /**\r\n     * Mettre la première lettre en capitales\r\n     * @param str Châine de caractère\r\n     */\n\n\n    cap(str) {\n      return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n    /**\r\n     * Ajouter l'adresse au fichier pour lui donner\r\n     * @param {string} str URL à convertir\r\n     */\n\n\n    setURL(str) {\n      if (str.indexOf(environment.DIR) != -1) {\n        str = str.slice(str.lastIndexOf('/') + 1, str.length); // Récupérer la fin de l'URL du fichier\n      }\n\n      return environment.ADR + environment.DIR + this.dir + '/' + str;\n    }\n    /**\r\n     * Extraire le nom du fichier\r\n     * @param str chaîne à traiter pour extraire le nom du fichier\r\n     */\n\n\n    setFile(str) {\n      return str.substr(str.lastIndexOf(\"/\") + 1, str.length);\n    }\n\n  }\n\n  ScanService.ɵfac = function ScanService_Factory(t) {\n    return new (t || ScanService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotificationService), i0.ɵɵinject(i3.UtilsService), i0.ɵɵinject(i4.FiltresService), i0.ɵɵinject(i5.SetsService), i0.ɵɵinject(i6.AuthService));\n  };\n\n  ScanService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ScanService,\n    factory: ScanService.ɵfac,\n    providedIn: 'root'\n  });\n  return ScanService;\n})();","map":null,"metadata":{},"sourceType":"module"}