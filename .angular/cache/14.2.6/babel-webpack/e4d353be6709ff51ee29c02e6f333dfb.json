{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { Filtre } from '../modeles/filtre.modele';\nimport { environment } from '../../../../environments/environment';\nimport { NotificationService } from 'src/app/intranet/systeme/services/notification.service';\nimport { AuthService } from '../../../extranet/systeme/services/auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/intranet/systeme/services/notification.service\";\nimport * as i3 from \"../../../extranet/systeme/services/auth.service\";\nexport let FiltresService = /*#__PURE__*/(() => {\n  class FiltresService {\n    constructor(http, notifServ, auth) {\n      this.http = http;\n      this.notifServ = notifServ;\n      this.auth = auth;\n      this.filtres = [new Filtre()];\n      this.getFiltres();\n    }\n    /**\r\n     * Récupérer la liste des filtres générés\r\n     */\n\n\n    getFiltres() {\n      // return this.http.get<Array<CollectionModel>>(this.dataStorage + 'collections.json');\n      this.http.get(environment.SERV + 'filtres').subscribe(data => {\n        console.log(data);\n        this.filtres = data;\n        this.notifServ.notif(\"Filtres chargés\");\n      }, erreur => {\n        console.log(erreur);\n        this.notifServ.notif(\"Erreur dans le chargement du filtre\");\n      });\n      this.getPrefix();\n    }\n    /**\r\n       * Renvoyer un filtre du tableau en fonction de son _id\r\n       * @param id _id de la notice à récupérer\r\n       * @return FiltreModel (une notice)\r\n       */\n\n\n    getFiltre(id) {\n      for (let c of this.filtres) {\n        if (c._id == id) {\n          return c;\n        }\n      }\n    }\n    /**\r\n       * Mise à jour d'une collection\r\n       */\n\n\n    majFiltre(filtre) {\n      this.http.put(environment.SERV + 'filtres', filtre).subscribe(retour => {\n        console.log(retour);\n        this.notifServ.notif(\"Filtre mis à jour\");\n      }, erreur => {\n        console.log(erreur);\n        this.notifServ.notif(\"Erreur dans la mise à jour du filtre\");\n      });\n    }\n    /**\r\n     * Ajouter un filtre\r\n     */\n\n\n    ajouteFiltre(filtre) {\n      console.log(filtre);\n      this.http.post(environment.SERV + 'filtres', filtre).subscribe(retour => {\n        console.log(retour);\n        this.notifServ.notif(\"Filtre enregistré\");\n        this.getFiltres();\n      }, erreur => {\n        console.log(erreur);\n        this.notifServ.notif(\"Erreur dans l'ajout du filtre\");\n      });\n    }\n    /**\r\n     * Supprimer un filtre\r\n     */\n\n\n    supprimeFiltre(id) {\n      console.log(id);\n      this.http.delete(environment.SERV + 'filtres/' + id).subscribe(retour => {\n        console.log(retour);\n        this.notifServ.notif(\"Filtre supprimé correctement\");\n        this.getFiltres();\n      }, erreur => {\n        console.log(erreur);\n        this.notifServ.notif(\"Erreur dans la suppression du filtre\");\n      });\n    }\n    /**\r\n     * Afficher une notification\r\n     * @param msg Message de notification à afficher\r\n     */\n\n\n    notif(msg) {\n      this.notifServ.notif(msg);\n    }\n    /**\r\n     * Récupérer les prefix OAI depuis la base\r\n     */\n\n\n    getPrefix() {\n      this.http.get(environment.SERV + 'prefix/').subscribe(retour => {\n        this.notifServ.notif(\"Prefix chargés\");\n        this.prefix = retour;\n      }, erreur => {\n        console.log(erreur);\n        this.notifServ.notif(\"Erreur dans le chargement des prefix\");\n      });\n    }\n\n  }\n\n  FiltresService.ɵfac = function FiltresService_Factory(t) {\n    return new (t || FiltresService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotificationService), i0.ɵɵinject(i3.AuthService));\n  };\n\n  FiltresService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FiltresService,\n    factory: FiltresService.ɵfac,\n    providedIn: 'root'\n  });\n  return FiltresService;\n})();","map":null,"metadata":{},"sourceType":"module"}