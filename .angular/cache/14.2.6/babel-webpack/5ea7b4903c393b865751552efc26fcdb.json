{"ast":null,"code":"import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from \"rxjs/operators\";\nimport { TokenService } from './token.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./token.service\";\nexport let AuthIntercepteur = /*#__PURE__*/(() => {\n  class AuthIntercepteur {\n    /**\n     * Interepteur qui ajouter un token d'identification à chaque requête HTTP sortante\n     * L'intercepteur clone un requête, transforme la requête clonée et l'envoie\n     */\n    constructor(tokenServ) {\n      this.tokenServ = tokenServ;\n    }\n    /**\n     * Récupérer les requêtes, les cloner et ajouter l'authentification si elle existe\n     * @param req La requête interceptée\n     * @param next La requête clonée\n     */\n\n\n    intercept(req, next) {\n      // Réécriture des entêtes si un token existe\n      if (this.tokenServ.token) {\n        this.entetes = {\n          headers: req.headers.set('Content-Type', 'application/json').set('Authorization', 'Bearer ' + this.tokenServ.token).set('Access-Control-Allow-Origin', '*')\n        };\n      } else {\n        this.entetes = {\n          headers: req.headers.set('Content-Type', 'application/json').set('Access-Control-Allow-Origin', '*')\n        };\n      }\n\n      const authReq = req.clone(this.entetes); // Envoyer la nouvelle requête\n\n      return next.handle(authReq).pipe(catchError(erreur => {\n        console.log(\"Une erreur s'est produite\");\n        console.log(erreur); // Récupérer les erreurs et les affichers\n        // return Observable.throw(erreur); // Renvoyer l'erreur\n\n        return throwError(erreur);\n      }));\n    }\n\n  }\n\n  AuthIntercepteur.ɵfac = function AuthIntercepteur_Factory(t) {\n    return new (t || AuthIntercepteur)(i0.ɵɵinject(i1.TokenService));\n  };\n\n  AuthIntercepteur.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthIntercepteur,\n    factory: AuthIntercepteur.ɵfac\n  });\n  return AuthIntercepteur;\n})();","map":null,"metadata":{},"sourceType":"module"}