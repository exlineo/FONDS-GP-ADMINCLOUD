{"ast":null,"code":"import { HttpEvent, HttpHandler, HttpRequest, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from \"rxjs/operators\";\nimport { AuthService } from './auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport let SecuriteIntercepteur = /*#__PURE__*/(() => {\n  class SecuriteIntercepteur {\n    constructor(auth) {\n      this.auth = auth;\n    }\n\n    intercept(req, next) {\n      return next.handle(req).pipe(catchError(erreur => {\n        if (erreur instanceof HttpErrorResponse && erreur.status == 401) {\n          this.auth.deconnexion();\n          console.log(\"Une erreur s'est produite\");\n          console.log(erreur); // Récupérer les erreurs et les affichers\n        }\n\n        return throwError(erreur); // return Observable.throw(erreur); // Retourner l'erreur dans tous les cas\n      }));\n    }\n\n  }\n\n  SecuriteIntercepteur.ɵfac = function SecuriteIntercepteur_Factory(t) {\n    return new (t || SecuriteIntercepteur)(i0.ɵɵinject(i1.AuthService));\n  };\n\n  SecuriteIntercepteur.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SecuriteIntercepteur,\n    factory: SecuriteIntercepteur.ɵfac\n  });\n  return SecuriteIntercepteur;\n})();","map":null,"metadata":{},"sourceType":"module"}