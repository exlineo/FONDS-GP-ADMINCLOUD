{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { environment } from 'src/environments/environment';\nimport { NotificationService } from \"../../systeme/services/notification.service\";\nimport { TokenService } from './token.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../systeme/services/notification.service\";\nimport * as i4 from \"./token.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router, notService, tokenServ) {\n      this.http = http;\n      this.router = router;\n      this.notService = notService;\n      this.tokenServ = tokenServ;\n      this.auth = false;\n\n      if (eval(sessionStorage.getItem('auth'))) {\n        this.auth = eval(sessionStorage.getItem('auth'));\n      }\n\n      ;\n    }\n    /**\r\n     * Authentifier un utilisateur\r\n     * @param u Objet d'identification\r\n     * @method authUser() - Authentifie un user en fct. d'un email et d'un mdp\r\n     */\n\n\n    authUser(u) {\n      this.http.get(environment.SERV + 'comptes/' + u.compte + '/' + u.mdp).subscribe(retour => {\n        if (retour['status'] == '401' || !retour['compte']) {\n          this.tokenServ.token = null;\n          console.log(\"Echec de la connexion\");\n        } else {\n          this.tokenServ.token = retour['token'];\n          this.userAuth = retour['compte'];\n          if (this.userAuth.statut) this.tokenServ.statut = this.userAuth.statut;\n          console.log(this.tokenServ.statut);\n          this.connexion(null);\n          this.router.navigateByUrl('/intranet');\n          this.notService.openSnackBar('Bienvenue ' + u.email, 'connexion');\n        }\n      }, erreur => {\n        console.log(erreur);\n        this.notService.openSnackBar('Erreur dans les paramètres de connexion', 'Connexion');\n      });\n    }\n    /**\r\n     * Déconnecter l'utilisateur\r\n     */\n\n\n    deconnexion() {\n      this.auth = false;\n      this.tokenServ.token = null;\n      this.tokenServ.statut = 0;\n      this.router.navigateByUrl('/');\n      sessionStorage.setItem('auth', null);\n    }\n    /**\r\n     * Connecter un utilisateur\r\n     */\n\n\n    connexion(token) {\n      sessionStorage.setItem('auth', 'true');\n      this.auth = true;\n      console.log(\"Auth\", this.auth);\n\n      if (token) {\n        this.tokenServ.token = token;\n      }\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.NotificationService), i0.ɵɵinject(i4.TokenService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}