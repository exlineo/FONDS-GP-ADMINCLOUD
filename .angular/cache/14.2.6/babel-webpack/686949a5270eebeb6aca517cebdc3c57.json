{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { NotificationService } from 'src/app/intranet/systeme/services/notification.service';\nimport { AuthService } from '../../../extranet/systeme/services/auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/intranet/systeme/services/notification.service\";\nimport * as i3 from \"../../../extranet/systeme/services/auth.service\";\nexport let SetsService = /*#__PURE__*/(() => {\n  class SetsService {\n    constructor(http, notifServ, auth) {\n      this.http = http;\n      this.notifServ = notifServ;\n      this.auth = auth;\n      console.log(\"Service des connexions\");\n      this.getSets();\n    }\n    /**\n     * Récupérer l'ensemble des collections disponibles dans le depôt\n     */\n\n\n    getSets() {\n      this.http.get(environment.SERV + 'sets').subscribe(data => {\n        this.sets = data;\n      }, erreur => {\n        console.log(erreur);\n        this.notifServ.notif(\"Une erreur s'est produite dans l'enregistrement\");\n      });\n    }\n    /**\n     * Renvoyer une collection du tableau en fonction de son _id\n     * @param id _id de la notice à récupérer\n     * @return CollectionI (une collection)\n     */\n\n\n    getSet(id) {\n      for (let s of this.sets) {\n        if (s._id == id) {\n          this.set = s;\n        }\n      }\n    }\n    /**\n     * Supprimer la collection\n     * @param id ID de la collection à supprimer\n     */\n\n\n    supprSet(id) {\n      this.http.delete(environment.SERV + 'sets/' + id).subscribe(retour => {\n        this.sets.splice(this.sets.findIndex(s => s._id == id), 1);\n      }, erreur => {\n        console.log(erreur);\n        this.notifServ.notif(\"Une erreur s'est produite dans l'enregistrement\");\n      });\n    }\n    /**\n     * Mise à jour d'un SET\n     */\n\n\n    majSet(s) {\n      this.http.put(environment.SERV + 'sets/' + s._id, s).subscribe(retour => {\n        this.notifServ.notif(\"Le SET a été mis à jour\");\n      }, erreur => {\n        console.log(erreur);\n        this.notifServ.notif(\"Une erreur s'est produite dans l'enregistrement\");\n      });\n    }\n    /**\n     * Ajouter une collection\n     */\n\n\n    ajouteSet(s) {\n      this.http.post(environment.SERV + 'sets', s).subscribe(retour => {\n        console.log(retour);\n        this.notifServ.notif(\"Le SET a été ajouté\");\n      }, erreur => {\n        console.log(erreur);\n        this.notifServ.notif(\"Une erreur s'est produite dans l'enregistrement\");\n      });\n    }\n    /**\n     * Les séries d'une collection\n     * @param id ID de la collection dont nous recherchons les séries\n     */\n\n\n    getFonds(f) {\n      this.http.get(environment.SERV + 'sets/' + f).subscribe(retour => {\n        console.log(retour);\n        this.notifServ.notif(\"La liste des fonds a été obtenue\");\n      }, erreur => {\n        console.log(erreur);\n        this.notifServ.notif(\"Une erreur s'est produite dans l'enregistrement\");\n      });\n    }\n\n  }\n\n  SetsService.ɵfac = function SetsService_Factory(t) {\n    return new (t || SetsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotificationService), i0.ɵɵinject(i3.AuthService));\n  };\n\n  SetsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SetsService,\n    factory: SetsService.ɵfac,\n    providedIn: 'root'\n  });\n  return SetsService;\n})();","map":null,"metadata":{},"sourceType":"module"}