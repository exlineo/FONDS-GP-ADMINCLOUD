{"ast":null,"code":"import { HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from \"rxjs/operators\";\nimport { TokenService } from './token.service';\nimport { NotificationService } from './notification.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./token.service\";\nimport * as i2 from \"./notification.service\";\nexport let AdminIntercepteur = /*#__PURE__*/(() => {\n  class AdminIntercepteur {\n    /**\r\n     * Interepteur qui ajouter un token d'identification à chaque requête HTTP sortante\r\n     * L'intercepteur clone un requête, transforme la requête clonée et l'envoie\r\n     */\n    constructor(tokenServ, notif) {\n      this.tokenServ = tokenServ;\n      this.notif = notif;\n    }\n    /**\r\n     * Récupérer les requêtes, les cloner et ajouter l'authentification si elle existe\r\n     * @param req La requête interceptée\r\n     * @param next La requête clonée\r\n     */\n\n\n    intercept(req, next) {\n      if (this.condition(req)) {\n        const adminReq = req.clone(); // Envoyer la nouvelle requête\n\n        return next.handle(adminReq).pipe(catchError(erreur => {\n          console.log(\"Une erreur s'est produite\", erreur);\n          return throwError(erreur);\n        }));\n      } else {\n        console.log(\"Vos droits ne permettent pas de faire cette opération\");\n        this.notif.openSnackBar(\"Vos droits ne permettent pas de faire cette opération, veuillez contacter votre administrateur.\", \"Alerte\");\n        return new Observable();\n      }\n    }\n\n    condition(r) {\n      let bool = false; // la requête ne concerne pas une mise à jour des données\n      // Corriger plus tard le traitement sur l'url\n\n      if (r.method == 'GET' || this.tokenServ.statut >= 2 && this.tokenServ.token || r.url.indexOf('notices/collection')) {\n        bool = true;\n      }\n\n      return bool;\n    }\n\n  }\n\n  AdminIntercepteur.ɵfac = function AdminIntercepteur_Factory(t) {\n    return new (t || AdminIntercepteur)(i0.ɵɵinject(i1.TokenService), i0.ɵɵinject(i2.NotificationService));\n  };\n\n  AdminIntercepteur.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AdminIntercepteur,\n    factory: AdminIntercepteur.ɵfac\n  });\n  return AdminIntercepteur;\n})();","map":null,"metadata":{},"sourceType":"module"}