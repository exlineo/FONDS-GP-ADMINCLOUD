{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let UtilsService = /*#__PURE__*/(() => {\n  class UtilsService {\n    /**\r\n     * Partage de méthodes dans les composants\r\n     */\n    constructor() {\n      this.params = {\n        limite: 20,\n        langue: 'fr_FR'\n      };\n      this.limite = 30;\n    }\n    /**\r\n     * Connaître le type d'un objet\r\n     * @param value Valeur dont on veut connaître le type\r\n     */\n\n\n    typeOf(value) {\n      if (Array.isArray(value)) {\n        return 'array';\n      }\n\n      return typeof value;\n    }\n    /**\r\n     * Tronquer un tableau pour une pagination\r\n     * @param ar Tableau à tronquer\r\n     * @param page Début et fin du slice sur le tableau\r\n     */\n\n\n    tronqueTab(ar, page) {\n      return ar.slice(page.min, page.max);\n    }\n    /**\r\n     * Eviter de lister les documents\r\n     * @param c chaîne ou objet représentant une clé dans un objet listé\r\n     */\n\n\n    getObj(c) {\n      if (typeof c !== 'object') return true;\n      return false;\n    }\n    /**\r\n     * Extension à étudier pour renvoyer un format\r\n     */\n\n\n    setFormat(ext) {\n      console.log(ext);\n\n      switch (ext) {\n        case 'mp3':\n        case 'oga':\n        case 'ogg':\n        case 'aac':\n          return 'audio/' + ext;\n          break;\n\n        case 'wav':\n          return 'audio/x-wav';\n          break;\n\n        case 'mp4':\n        case 'webm':\n        case 'ogv':\n        case 'vba':\n          return 'video/' + ext;\n          break;\n\n        case 'rtf':\n        case 'pdf':\n          return 'application/' + ext;\n          break;\n\n        case 'jpg':\n        case 'jpeg':\n        case 'gif':\n        case 'png':\n        case 'webp':\n          return 'image/' + ext;\n          break;\n\n        default:\n          return false;\n      }\n    }\n    /**\r\n       * Afficher l'arrière plan d'une notice\r\n       * @param n Notice dont il faut gérer l'affichage d'arrière plan\r\n       */\n\n\n    setNoticeBg(adr, n) {\n      const type = n.dublincore.format;\n      let bg = '';\n\n      if (type && (type.indexOf('video') != -1 || type.indexOf('audio') != -1)) {\n        n.dublincore.coverage ? bg = n.dublincore.coverage : bg = 'assets/img/pictos/picto_media.png';\n      } else if (type && type.indexOf('application') != -1) {\n        bg = 'assets/img/pictos/picto_docs.png';\n      } else {\n        bg = adr + n.media.url;\n      }\n\n      return `url(\"${bg}\")`;\n    }\n    /**\r\n     * Jouer une vidéo ou un audio\r\n     * @param ev Evéneùent déclenché\r\n     */\n\n\n    play(ev) {\n      if (ev.currentTarget.previousElementSibling) {\n        let el = ev.currentTarget.previousElementSibling;\n        if (el.tagName.indexOf('VIDEO') != -1 || el.tagName.indexOf('AUDIO') != -1) el.play();\n      }\n    }\n    /**\r\n     * Mettre en pause un média\r\n     * @param ev Evéneùent déclenché\r\n     */\n\n\n    pause(ev) {\n      if (ev.currentTarget.previousElementSibling) {\n        let el = ev.currentTarget.previousElementSibling;\n        if (el.tagName.indexOf('VIDEO') != -1 || el.tagName.indexOf('AUDIO') != -1) el.pause();\n      }\n    }\n\n  }\n\n  UtilsService.ɵfac = function UtilsService_Factory(t) {\n    return new (t || UtilsService)();\n  };\n\n  UtilsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UtilsService,\n    factory: UtilsService.ɵfac,\n    providedIn: 'root'\n  });\n  return UtilsService;\n})();","map":null,"metadata":{},"sourceType":"module"}