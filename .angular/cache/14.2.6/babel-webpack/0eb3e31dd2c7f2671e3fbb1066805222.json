{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MediaService = /*#__PURE__*/(() => {\n  class MediaService {\n    constructor(http) {\n      this.http = http;\n      this.dataStorage = 'http://localhost:8080/api/';\n      this.initMedias = [];\n      this.loadAllMedias();\n    }\n    /**\n     * @method createMedia() - Retourne un obs. d'un create de media\n     * @returns {Observable}\n     */\n\n\n    createMedia(media) {\n      return this.http.post(this.dataStorage + 'medias/', media);\n    }\n    /**\n     * @method readMedia() - Retourne un obs. d'un read de media\n     * @returns {Observable}\n     */\n\n\n    readMedia(idMedia) {\n      return this.http.get(this.dataStorage + 'medias/' + idMedia);\n    }\n    /**\n     * @method createMedia() - Retourne un obs. d'un update de media\n     * @returns {Observable}\n     */\n\n\n    updateMedia(media) {\n      return this.http.put(this.dataStorage + 'medias/' + media._id, media);\n    }\n    /**\n     * @method createMedia() - Retourne un obs. d'un delete de media\n     * @returns {Observable}\n     */\n\n\n    deleteMedia(media) {\n      return this.http.delete(this.dataStorage + 'medias/' + media._id);\n    }\n    /**\n     * @method readAllMedia() - Retourne un obs. d'un read de tous les medias\n     * @returns {Observable}\n     */\n\n\n    readAllMedia() {\n      return this.http.get(this.dataStorage + 'medias/');\n    }\n    /**\n     * @method loadAllMedias() - Enregistre la liste des médias dans une variables\n     */\n\n\n    loadAllMedias() {\n      this.readAllMedia().subscribe(data => {\n        this.initMedias = data;\n      });\n    }\n    /**\n     * @method testCrudMedia() - test du service\n     * @returns {Observable}\n     */\n\n\n    testCrudMedia() {\n      /*\n      //read\n      let testMedia: MediaModel;\n      this.readMedia(1).subscribe(\n          data => {\n              testMedia = data[0];\n              console.log(testMedia);\n          }\n      );\n      */\n\n      /*\n      //update\n      let testMedia: MediaModel;\n      this.readMedia(1).subscribe(\n          data => {\n              testMedia = data[0];\n              console.log(testMedia);\n              testMedia.name += ' test';\n              this.updateMedia(testMedia).subscribe(\n                  () => {\n                      this.readMedia(1).subscribe(\n                          data => {\n                              testMedia = data[0];\n                              console.log(testMedia);\n                          }\n                      );\n                  }\n              );\n          }\n      );\n      */\n      //create\n\n      /*\n      this.readAllMedia().subscribe(\n          data => {\n              console.log(data);\n              let mediaTest = data[0];\n              mediaTest.id = data.length;\n              this.createMedia(mediaTest).subscribe(\n                  () => {\n                      this.readAllMedia().subscribe(\n                          data => {\n                              console.log(data);\n                          }\n                      );\n                  }\n              )\n          }\n      )\n      */\n      //delete\n\n      /*\n      this.readAllMedia().subscribe(\n          data => {\n              console.log(data);\n              let idTest = data.length-1;\n              let mediaTest = data[idTest];\n              this.deleteMedia(mediaTest).subscribe(\n                  () => {\n                      this.readAllMedia().subscribe(\n                          data => {\n                              console.log(data);\n                          }\n                      )\n                  }\n              );\n          }\n      )\n      */\n    }\n\n  }\n\n  MediaService.ɵfac = function MediaService_Factory(t) {\n    return new (t || MediaService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  MediaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MediaService,\n    factory: MediaService.ɵfac,\n    providedIn: 'root'\n  });\n  return MediaService;\n})();","map":null,"metadata":{},"sourceType":"module"}