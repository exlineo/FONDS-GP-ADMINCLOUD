{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { NotificationService } from 'src/app/intranet/systeme/services/notification.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/intranet/systeme/services/notification.service\";\nexport let NoticeService = /*#__PURE__*/(() => {\n  class NoticeService {\n    constructor(http, notifServ) {\n      this.http = http;\n      this.notifServ = notifServ;\n      this.seriesCollec = []; // La liste des séries présentes dans les notices de la collection\n      // this.getNotices();\n\n      this.notice = {};\n    }\n    /**\r\n     * Récupérer l'ensemble des notices disponibles\r\n     */\n\n\n    getNotices() {\n      this.http.get(environment.SERV + 'notices').subscribe(data => {\n        this.noticesAll = data.map(n => {\n          n.metadonnees = n.metadonnees[0];\n          return n;\n        });\n        this.notifServ.notif(\"Notices chargées\");\n      }, erreur => {\n        console.log(erreur);\n        this.notifServ.notif(\"Erreur, les notices n'ont pu être récupérées\");\n      });\n    }\n    /**\r\n     * Récupérer les notices d'une collection\r\n     * @param id ID de la collection dont nous souhaitons les notices\r\n     */\n\n\n    getNoticesByCollec(ids) {\n      this.noticesCollec = []; // this.http.get<Array<NoticeModel>>(environment.SERV+'notices/collection/'+id, {params:{'idCollection':id}}).subscribe(\n\n      this.http.post(environment.SERV + 'notices/collection', ids).subscribe(data => {\n        // Transformation des données pour transformer le tableau fourni en objet (comme ce devrait être)\n        if (Array.isArray(data[0].metadonnees)) {\n          this.noticesCollec = data.map(n => {\n            n.metadonnees = n.metadonnees[0];\n            return n;\n          });\n        } else {\n          this.noticesCollec = data;\n        }\n\n        console.log(this.noticesCollec);\n        this.getSeries();\n        this.notifServ.notif(\"Les notices ont été récupérées\");\n      }, erreur => {\n        console.log(erreur);\n        this.notifServ.notif(\"Erreur dans la récupération des notices\");\n      });\n    }\n    /**\r\n     * Renvoyer une notice du tableau en fonction de son _id\r\n     * @param id _id de la notice à récupérer\r\n     * @param select Ajouter select à la notice pour noter qu'elle a été sélectionnée\r\n     * @return DocumentModel (une notice)\r\n     */\n\n\n    getNotice(id, select = false) {\n      this.notice = {};\n\n      if (this.noticesCollec) {\n        this.notice = this.noticesCollec.find(n => n._id === id);\n      }\n\n      ;\n\n      if (this.noticesAll) {\n        this.notice = this.noticesAll.find(n => n._id === id);\n      }\n\n      ;\n    }\n    /**\r\n     * Mettre à jour une notice\r\n     * @param notice ID de la notice à enlever de la collection\r\n     */\n\n\n    updateNotice(id, notice) {\n      this.http.put(environment.SERV + 'notices/' + id, notice).subscribe(retour => {\n        console.log(retour);\n        this.notifServ.notif(\"Mise à jour de la notice effectuée\");\n      }, erreur => {\n        console.log(erreur);\n        this.notifServ.notif(\"Une erreur s'est produite dans l'enregistrement\");\n      });\n    }\n    /**\r\n     * Supprimer une notice\r\n     * @param id ID de la notice à supprimer\r\n     */\n\n\n    supprNotice(id) {\n      this.http.delete(environment.SERV + 'notices/' + id).subscribe(retour => {\n        console.log(retour);\n        this.notifServ.notif(\"La notice a été supprimée\");\n      }, erreur => {\n        console.log(erreur);\n        this.notifServ.notif(\"Une erreur s'est produite dans l'enregistrement\");\n      });\n    }\n    /**\r\n     * Récupérer la liste des séries depuis les notices chargées\r\n     */\n\n\n    getSeries() {\n      this.seriesCollec = []; // for(let s of this.noticesCollec){\n      // \tif(s.relations.serie && this.seriesCollec.indexOf(s.relations.serie) == -1){\n      // \t\tthis.seriesCollec.push(s.relations.serie);\n      // \t}\n      // }\n    }\n\n  }\n\n  NoticeService.ɵfac = function NoticeService_Factory(t) {\n    return new (t || NoticeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NotificationService));\n  };\n\n  NoticeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: NoticeService,\n    factory: NoticeService.ɵfac,\n    providedIn: 'root'\n  });\n  return NoticeService;\n})();","map":null,"metadata":{},"sourceType":"module"}